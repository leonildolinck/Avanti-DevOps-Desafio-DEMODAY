name: CI/CD Pipeline (Front-end)

on:
  push:
    branches:
      - main
    paths:
      - "front-end/**"

  pull_request:
    branches:
      - main
    paths:
      - "front-end/**"

env:
  DOCKER_USER: ${{ vars.DOCKER_USER }}
  DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
  DOCKER_IMAGE_NAME: ${{ vars.DOCKER_USER }}/nginx-frontend
  DOCKER_IMAGE_TAG: 1.0.${{ github.run_id }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - run: npm ci
        working-directory: ./front-end
      - run: npm run lint
        working-directory: ./front-end

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
      - run: npm ci
        working-directory: ./front-end
      - run: npm run test -- --watch=false
        working-directory: ./front-end
      - run: npm run test:coverage
        working-directory: ./front-end

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref_name == 'main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install dependencies
        run: npm ci
        working-directory: ./front-end

      - name: Build front-end (gera dist/)
        run: npm run build
        working-directory: ./front-end

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USER  }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./front-end
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
            ${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy:
    name: Deploy to GCP Cloud Run
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref_name == 'main'
    env:
      TFC_TOKEN: ${{ secrets.TFC_TOKEN }}
      GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform -chdir=front-end/infra init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TFC_TOKEN: ${{ secrets.TFC_TOKEN }}

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=front-end/infra validate
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Terraform Apply
        id: apply
        run: terraform -chdir=front-end/infra apply -auto-approve
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
          TF_VAR_docker_image_name: ${{ env.DOCKER_IMAGE_NAME }}
          TF_VAR_docker_image_tag: ${{ env.DOCKER_IMAGE_TAG }}
