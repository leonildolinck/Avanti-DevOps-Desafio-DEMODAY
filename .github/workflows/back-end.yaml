name: CI/CD Pipeline (Back-end)

on:
  push:
    branches:
      - main
      - "*"
    paths:
      - "back-end/**"

  pull_request:
    branches:
      - main

env:
  DOCKER_USER: ${{ vars.DOCKER_USER }}
  DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
  DOCKER_IMAGE_NAME: ${{ vars.DOCKER_USER }}/api-cardapio
  DOCKER_IMAGE_TAG: 1.0.${{ github.run_id }}

jobs:
  lint:
    name: Lint Back-end Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setting Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff

      - name: Run lint with Ruff
        run: ruff check .

  test:
    name: Run Tests (Back-end)
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setting Python Environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest httpx

      - name: Run tests with Pytest
        run: pytest --cov=app --cov-report=xml --cov-report=html

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    if: github.event_name == 'push' && github.ref_name == 'main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}
            ${{ env.DOCKER_IMAGE_NAME }}:latest
  
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push 
    if: github.event_name == 'push' && github.ref_name == 'main'
    env:
      TFC_TOKEN: ${{ secrets.TFC_TOKEN }}
      KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TFC_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform -chdir=infra init
        env:
          TFC_TOKEN: ${{ secrets.TFC_TOKEN }}

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=infra validate

      - name: Terraform Apply
        id: apply
        run: terraform -chdir=infra apply -auto-approve
        env:
          KOYEB_TOKEN: ${{ secrets.KOYEB_TOKEN }}
          TF_VAR_docker_image_name: ${{ env.DOCKER_IMAGE_NAME }}
          TF_VAR_docker_image_tag: ${{ env.DOCKER_IMAGE_TAG }}